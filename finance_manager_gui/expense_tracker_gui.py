import sqlite3
import tkinter as tk
import matplotlib.pyplot as plt
from get_user_expense import get_user_expense
from save_expense_to_file import save_expense_to_file
from summarize_expenses import summarize_expenses

def save_expense_and_update_summary():
    expense = get_user_expense()
    save_expense_to_file(expense, "expenses.db")
    budget = int(budget_entry.get())
    update_summary(budget)

def update_summary(budget):
    expense_summary.delete(1.0, tk.END)  #expense_summary.delete(1.0, tk.END): This line deletes all text from the expense_summary widget in the tkinter GUI application.
                                                #1.0 represents the starting position of the text to delete (1 is the line number, and 0 is the column number).
                                                #tk.END is a constant provided by tkinter that represents the end of the text.
    summary = summarize_expenses("expenses.db", budget)
    expense_summary.insert(tk.END, summary)    #expense_summary.insert(tk.END, summary): This line inserts the summary text into the expense_summary widget at the end (tk.END).
                                               #tk.END again represents the end of the text in the widget.
                                               #summary is the text that was generated by summarize_expenses.

def visualize_data_pie():
    conn = sqlite3.connect("expenses.db")
    c = conn.cursor()
    c.execute("SELECT category, SUM(amount) FROM expenses GROUP BY category")   #category: This column is selected from the expenses table.
                                                                                #SUM(amount): This is an aggregate function that calculates the total sum of the amount column.
                                                                                #GROUP BY category: This clause groups the result set by the category column. It ensures that the SUM(amount) is calculated for each unique category.
    data = c.fetchall()
    conn.close()

    categories = [item[0] for item in data]  #It iterates over each item in the data list.
                                             #For each item, it extracts the first element (item[0]), which is assumed to be a category name or identifier.
                                             #This extracted element (item[0]) is then added to the categories list.
    amounts = [item[1] for item in data]

    plt.figure(figsize=(6, 6))
    plt.pie(amounts, labels=categories, autopct='%1.1f%%', startangle=140)
    plt.axis('equal')
    plt.title('Expense Distribution')
    plt.show()

def visualize_data_bar():
    conn = sqlite3.connect("expenses.db")
    c = conn.cursor()
    c.execute("SELECT category, SUM(amount) FROM expenses GROUP BY category")
    data = c.fetchall()
    conn.close()

    categories = [item[0] for item in data]
    amounts = [item[1] for item in data]

    plt.figure(figsize=(10, 6))
    plt.bar(categories, amounts, color='skyblue')
    plt.xlabel('Category')
    plt.ylabel('Total Amount')
    plt.title('Expenses by Category')
    plt.show()

def visualize_data_line():
    conn = sqlite3.connect("expenses.db")
    c = conn.cursor()
    c.execute("SELECT strftime('%Y-%m-%d', date) as day, SUM(amount) FROM expenses GROUP BY day")
    data = c.fetchall()
    conn.close()

    dates = [item[0] for item in data]
    amounts = [item[1] for item in data]

    plt.figure(figsize=(10, 6))
    plt.plot(dates, amounts, marker='o', linestyle='-', color='blue')
    plt.xlabel('Date')
    plt.ylabel('Total Amount')
    plt.title('Expenses Over Time')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

root = tk.Tk()
root.title("Expense Tracker")

# Budget input
budget_label = tk.Label(root, text="Enter your budget:")
budget_label.pack()
budget_entry = tk.Entry(root)
budget_entry.pack()

# Expense input
add_expense_button = tk.Button(root, text="Add Expense", command=save_expense_and_update_summary)
add_expense_button.pack()

# Summary text area
expense_summary = tk.Text(root, height=20, width=50)
expense_summary.pack()

# Update summary button
update_summary_button = tk.Button(root, text="Update Summary", command=lambda: update_summary(int(budget_entry.get())))
update_summary_button.pack()

# Visualize data buttons
visualize_data_pie_button = tk.Button(root, text="Visualize Data (Pie Chart)", command=visualize_data_pie)
visualize_data_pie_button.pack()

visualize_data_bar_button = tk.Button(root, text="Visualize Data (Bar Chart)", command=visualize_data_bar)
visualize_data_bar_button.pack()

visualize_data_line_button = tk.Button(root, text="Visualize Data (Line Chart)", command=visualize_data_line)
visualize_data_line_button.pack()

root.mainloop()
